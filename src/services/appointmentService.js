import axiosInstance from "../utils/axiosConfig";

/**
 * Service ƒë·ªÉ t√≠ch h·ª£p v·ªõi AppointmentController backend
 */
export const appointmentService = {
  /**
   * L·∫•y chi ti·∫øt appointment tr∆∞·ªõc khi join video call
   * @param {number} appointmentId
   * @returns {Promise<Object>} Appointment details
   */
  async getAppointmentDetails(appointmentId) {
    try {
      console.log(`üîç Getting appointment details for ID: ${appointmentId}`);
      const response = await axiosInstance.get(
        `/api/appointments/${appointmentId}/details`
      );
      return response.data;
    } catch (error) {
      console.error("‚ùå Error getting appointment details:", error);
      throw new Error(`Kh√¥ng th·ªÉ l·∫•y th√¥ng tin cu·ªôc h·∫πn: ${error.message}`);
    }
  },

  /**
   * ƒê√°nh d·∫•u appointment ho√†n th√†nh (ch·ªâ coach)
   * @param {number} appointmentId
   * @returns {Promise<Object>} Success response
   */
  async completeAppointment(appointmentId) {
    try {
      console.log(`‚úÖ Completing appointment ID: ${appointmentId}`);
      const response = await axiosInstance.patch(
        `/api/appointments/${appointmentId}/complete-by-coach`
      );
      return response.data;
    } catch (error) {
      console.error("‚ùå Error completing appointment:", error);
      throw new Error(`Kh√¥ng th·ªÉ ho√†n th√†nh cu·ªôc h·∫πn: ${error.message}`);
    }
  },

  /**
   * Member g·ª≠i feedback sau cu·ªôc g·ªçi video
   * @param {number} appointmentId
   * @param {Object} feedbackData - {rating: number, feedback: string}
   * @returns {Promise<Object>} Success response
   */
  async giveFeedback(appointmentId, feedbackData) {
    try {
      console.log(`üìù Giving feedback for appointment ID: ${appointmentId}`);
      console.log(`üìä Feedback data:`, feedbackData);

      // Validation tr∆∞·ªõc khi g·ª≠i
      if (
        !feedbackData.rating ||
        feedbackData.rating < 1 ||
        feedbackData.rating > 5
      ) {
        throw new Error("Rating ph·∫£i l√† s·ªë t·ª´ 1 ƒë·∫øn 5");
      }

      const response = await axiosInstance.patch(
        `/api/appointments/${appointmentId}/feedback-by-member`,
        feedbackData
      );

      console.log(`‚úÖ Feedback sent successfully:`, response.data);
      return response.data;
    } catch (error) {
      console.error("‚ùå Error giving feedback:", error);
      console.error("üìä Failed feedback data:", feedbackData);
      throw new Error(`Kh√¥ng th·ªÉ g·ª≠i ƒë√°nh gi√°: ${error.message}`);
    }
  },

  /**
   * Member h·ªßy appointment
   * @param {number} appointmentId
   * @returns {Promise<Object>} Success response
   */
  async cancelByMember(appointmentId) {
    try {
      console.log(`‚ùå Member canceling appointment ID: ${appointmentId}`);
      const response = await axiosInstance.patch(
        `/api/appointments/${appointmentId}/cancel-by-member`
      );
      return response.data;
    } catch (error) {
      console.error("‚ùå Error canceling appointment by member:", error);
      throw new Error(`Kh√¥ng th·ªÉ h·ªßy cu·ªôc h·∫πn: ${error.message}`);
    }
  },

  /**
   * Coach h·ªßy appointment v·ªõi l√Ω do
   * @param {number} appointmentId
   * @param {string} absenceReason
   * @returns {Promise<Object>} Success response
   */
  async cancelByCoach(appointmentId, absenceReason) {
    try {
      console.log(`‚ùå Coach canceling appointment ID: ${appointmentId}`);
      const response = await axiosInstance.patch(
        `/api/appointments/${appointmentId}/cancel-by-coach?absenceReason=${encodeURIComponent(
          absenceReason
        )}`
      );
      return response.data;
    } catch (error) {
      console.error("‚ùå Error canceling appointment by coach:", error);
      throw new Error(`Kh√¥ng th·ªÉ h·ªßy cu·ªôc h·∫πn: ${error.message}`);
    }
  },

  /**
   * L·∫•y danh s√°ch appointments c·ªßa coach
   * @returns {Promise<Array>} List of appointments
   */
  async getAppointmentsByCoach() {
    try {
      console.log("üìã Getting appointments for coach");
      const response = await axiosInstance.get(
        "/api/appointments/appointments-of-coach"
      );
      return response.data;
    } catch (error) {
      console.error("‚ùå Error getting coach appointments:", error);
      throw new Error(`Kh√¥ng th·ªÉ l·∫•y danh s√°ch cu·ªôc h·∫πn: ${error.message}`);
    }
  },

  /**
   * L·∫•y danh s√°ch appointments c·ªßa member
   * @returns {Promise<Array>} List of appointments
   */
  async getAppointmentsByMember() {
    try {
      console.log("üìã Getting appointments for member");
      const response = await axiosInstance.get(
        "/api/appointments/appointments-of-member"
      );
      return response.data;
    } catch (error) {
      console.error("‚ùå Error getting member appointments:", error);
      throw new Error(`Kh√¥ng th·ªÉ l·∫•y danh s√°ch cu·ªôc h·∫πn: ${error.message}`);
    }
  },

  /**
   * L·∫•y danh s√°ch coaches ƒë·ªÉ book appointment
   * @param {number} pageNo
   * @param {number} pageSize
   * @returns {Promise<Object>} Paginated coach list
   */
  async getCoachesToBook(pageNo = 0, pageSize = 10) {
    try {
      console.log("üë• Getting coaches to book appointment");
      const response = await axiosInstance.get(
        `/api/appointments/view-all-coaches?pageNo=${pageNo}&pageSize=${pageSize}`
      );
      return response.data;
    } catch (error) {
      console.error("‚ùå Error getting coaches:", error);
      throw new Error(`Kh√¥ng th·ªÉ l·∫•y danh s√°ch chuy√™n vi√™n: ${error.message}`);
    }
  },

  /**
   * Book m·ªôt schedule th√†nh appointment
   * @param {number} scheduleId
   * @returns {Promise<Object>} Success response
   */
  async bookSchedule(scheduleId) {
    try {
      console.log(`üìÖ Booking schedule ID: ${scheduleId}`);
      const response = await axiosInstance.post(
        `/api/appointments/book/${scheduleId}`
      );
      return response.data;
    } catch (error) {
      console.error("‚ùå Error booking schedule:", error);
      throw new Error(`Kh√¥ng th·ªÉ ƒë·∫∑t l·ªãch h·∫πn: ${error.message}`);
    }
  },
};

export default appointmentService;
