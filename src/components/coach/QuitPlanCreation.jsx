import React, { useState, useEffect } from 'react';
import { useSearchParams, useNavigate } from 'react-router-dom';
import {
  Layout,
  Typography,
  Card,
  Form,
  Input,
  Select,
  DatePicker,
  Button,
  Alert,
  Row,
  Col,
  Divider,
  Space,
  Spin,
  message
} from 'antd';
import {
  UserOutlined,
  CalendarOutlined,
  MedicineBoxOutlined,
  BulbOutlined,
  HeartOutlined,
  FileTextOutlined,
  SaveOutlined,
  ArrowLeftOutlined
} from '@ant-design/icons';
import { createQuitPlan } from '../../services/quitPlanService';
import { getAssignedMembers } from '../../services/coachManagementService';
import { getCurrentUser } from '../../services/authService';
import moment from 'moment';
import '../../styles/QuitPlanCreation.css';

const { Title, Text, Paragraph } = Typography;
const { Option } = Select;
const { TextArea } = Input;
const { Content } = Layout;

const QuitPlanCreation = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const memberIdFromUrl = searchParams.get('memberId');
  
  const [form] = Form.useForm();
  const [selectedMemberId, setSelectedMemberId] = useState(memberIdFromUrl || '');
  const [loading, setLoading] = useState(false);
  const [members, setMembers] = useState([]);
  const [loadingMembers, setLoadingMembers] = useState(true);

  const user = getCurrentUser();
  const coachId = user?.userId;

  // Set member ID from URL on component mount and fetch assigned members
  useEffect(() => {
    if (memberIdFromUrl) {
      setSelectedMemberId(memberIdFromUrl);
      form.setFieldsValue({ memberId: memberIdFromUrl });
    }
    fetchAssignedMembers();
  }, [memberIdFromUrl, coachId, form]);

  const fetchAssignedMembers = async () => {
    if (!coachId) return;
    
    setLoadingMembers(true);
    try {
      console.log('Fetching assigned members for coach:', coachId);
      const response = await getAssignedMembers(coachId);
      console.log('getAssignedMembers response:', response);
      
      setMembers(response);
    } catch (error) {
      console.error('Error fetching assigned members:', error);
      message.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch th√†nh vi√™n');
      setMembers([]);
    } finally {
      setLoadingMembers(false);
    }
  };

  const smokingStatusOptions = [
    { value: 'NONE', label: 'Kh√¥ng h√∫t thu·ªëc' },
    { value: 'LIGHT', label: 'H√∫t √≠t (1-10 ƒëi·∫øu/ng√†y)' },
    { value: 'MEDIUM', label: 'H√∫t v·ª´a (11-20 ƒëi·∫øu/ng√†y)' },
    { value: 'SEVERE', label: 'H√∫t nhi·ªÅu (>20 ƒëi·∫øu/ng√†y)' }
  ];

  const handleFinish = async (values) => {
    if (!selectedMemberId) {
      message.error('Vui l√≤ng ch·ªçn th√†nh vi√™n');
      return;
    }

    // Validate dates
    if (values.endDate && values.startDate && moment(values.endDate).isBefore(moment(values.startDate))) {
      message.error('Ng√†y k·∫øt th√∫c ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu');
      return;
    }

    setLoading(true);

    try {
      const formData = {
        currentSmokingStatus: values.currentSmokingStatus,
        startDate: moment(values.startDate).format('YYYY-MM-DD'),
        endDate: moment(values.endDate).format('YYYY-MM-DD'),
        medicationInstructions: values.medicationInstructions || '',
        medicationsToUse: values.medicationsToUse || '',
        smokingTriggersToAvoid: values.smokingTriggersToAvoid || '',
        copingStrategies: values.copingStrategies || '',
        relapsePreventionStrategies: values.relapsePreventionStrategies || '',
        supportResources: values.supportResources || '',
        motivation: values.motivation || '',
        rewardPlan: values.rewardPlan || '',
        additionalNotes: values.additionalNotes || ''
      };

      console.log('Creating quit plan with data:', formData);
      console.log('For member ID:', selectedMemberId);
      console.log('currentSmokingStatus value:', values.currentSmokingStatus);
      console.log('Expected enum values: NONE, LIGHT, MEDIUM, SEVERE');

      const response = await createQuitPlan(selectedMemberId, formData);
      console.log('createQuitPlan response:', response);
      
      if (response.success) {
        message.success('üéâ T·∫°o k·∫ø ho·∫°ch cai thu·ªëc th√†nh c√¥ng! Th√†nh vi√™n s·∫Ω ƒë∆∞·ª£c th√¥ng b√°o v·ªÅ k·∫ø ho·∫°ch m·ªõi.');
        
        // Reset form after successful submission
        form.resetFields();
        
        // Only reset member selection if it wasn't from URL
        if (!memberIdFromUrl) {
          setSelectedMemberId('');
        }
        
        // Navigate back to dashboard after a short delay
        setTimeout(() => {
          navigate(-1);
        }, 2000);
      } else {
        message.error('‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o k·∫ø ho·∫°ch. Vui l√≤ng th·ª≠ l·∫°i.');
        console.error('API error:', response);
      }
    } catch (error) {
      console.error('Error creating quit plan:', error);
      message.error('‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o k·∫ø ho·∫°ch: ' + (error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'));
    } finally {
      setLoading(false);
    }
  };

  const goBack = () => {
    navigate(-1);
  };

  return (
    <Layout className="quit-plan-creation">
      <Content style={{ padding: '24px' }}>
        <div style={{ maxWidth: 1200, margin: '0 auto' }}>
          {/* Header */}
          <Card className="header-card" style={{ marginBottom: 24, textAlign: 'center' }}>
            <Space direction="vertical" size="middle">
              <Title level={2} style={{ margin: 0, color: '#1890ff' }}>
                ‚ú® T·∫°o K·∫ø Ho·∫°ch Cai Thu·ªëc
              </Title>
              <Paragraph style={{ margin: 0, fontSize: 16 }}>
                T·∫°o k·∫ø ho·∫°ch cai thu·ªëc c√° nh√¢n h√≥a v√† khoa h·ªçc cho th√†nh vi√™n c·ªßa b·∫°n
              </Paragraph>
              <Button 
                icon={<ArrowLeftOutlined />} 
                onClick={goBack}
                style={{ alignSelf: 'flex-start' }}
              >
                Quay l·∫°i
              </Button>
            </Space>
          </Card>

          {/* Main Form */}
          <Card>
            <Form
              form={form}
              layout="vertical"
              onFinish={handleFinish}
              initialValues={{
                currentSmokingStatus: 'NONE',
                startDate: moment(),
                endDate: moment().add(1, 'month')
              }}
            >
              {/* Member Selection */}
              <Card type="inner" style={{ marginBottom: 24 }}>
                <Title level={4} style={{ color: '#1890ff', marginBottom: 16 }}>
                  <UserOutlined /> Ch·ªçn Th√†nh Vi√™n
                </Title>
                
                <Form.Item
                  label="Th√†nh vi√™n"
                  name="memberId"
                  rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn th√†nh vi√™n' }]}
                >
                  <Select
                    placeholder={loadingMembers ? "üîÑ ƒêang t·∫£i..." : "-- Ch·ªçn th√†nh vi√™n --"}
                    value={selectedMemberId}
                    onChange={setSelectedMemberId}
                    disabled={!!memberIdFromUrl || loadingMembers}
                    loading={loadingMembers}
                    size="large"
                  >
                    {members.map(member => (
                      <Option key={member.memberId} value={member.memberId}>
                        üë§ {member.name} ({member.email})
                      </Option>
                    ))}
                  </Select>
                </Form.Item>
                
                {memberIdFromUrl && (
                  <Alert
                    message="‚úÖ Th√†nh vi√™n ƒë√£ ƒë∆∞·ª£c ch·ªçn t·ª´ dashboard"
                    type="info"
                    showIcon
                    style={{ marginTop: 8 }}
                  />
                )}
              </Card>

              {/* Basic Information */}
              <Card type="inner" style={{ marginBottom: 24 }}>
                <Title level={4} style={{ color: '#1890ff', marginBottom: 16 }}>
                  <CalendarOutlined /> Th√¥ng Tin C∆° B·∫£n
                </Title>
                
                <Row gutter={16}>
                  <Col xs={24} md={12}>
                    <Form.Item
                      label="üö¨ T√¨nh tr·∫°ng h√∫t thu·ªëc hi·ªán t·∫°i"
                      name="currentSmokingStatus"
                      rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn t√¨nh tr·∫°ng h√∫t thu·ªëc' }]}
                    >
                      <Select size="large">
                        {smokingStatusOptions.map(option => (
                          <Option key={option.value} value={option.value}>
                            {option.label}
                          </Option>
                        ))}
                      </Select>
                    </Form.Item>
                  </Col>
                  <Col xs={24} md={12}>
                    <Form.Item
                      label="üìÖ Ng√†y b·∫Øt ƒë·∫ßu"
                      name="startDate"
                      rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu' }]}
                    >
                      <DatePicker size="large" style={{ width: '100%' }} />
                    </Form.Item>
                  </Col>
                </Row>
                
                <Form.Item
                  label="üèÅ Ng√†y k·∫øt th√∫c"
                  name="endDate"
                  rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ng√†y k·∫øt th√∫c' }]}
                >
                  <DatePicker size="large" style={{ width: '100%' }} />
                </Form.Item>
              </Card>

              {/* Medication Section */}
              <Card type="inner" style={{ marginBottom: 24 }}>
                <Title level={4} style={{ color: '#1890ff', marginBottom: 16 }}>
                  <MedicineBoxOutlined /> Thu·ªëc v√† H∆∞·ªõng D·∫´n
                </Title>
                
                <Form.Item
                  label="üíâ Thu·ªëc s·ª≠ d·ª•ng"
                  name="medicationsToUse"
                >
                  <TextArea
                    rows={3}
                    placeholder="V√≠ d·ª•: Mi·∫øng d√°n nicotine 21mg, k·∫πo cao su nicotine 2mg, thu·ªëc Varenicline..."
                  />
                </Form.Item>
                
                <Form.Item
                  label="üìù H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng thu·ªëc"
                  name="medicationInstructions"
                >
                  <TextArea
                    rows={4}
                    placeholder="H∆∞·ªõng d·∫´n chi ti·∫øt: th·ªùi gian s·ª≠ d·ª•ng, li·ªÅu l∆∞·ª£ng, c√°ch d√πng, t√°c d·ª•ng ph·ª• c·∫ßn l∆∞u √Ω..."
                  />
                </Form.Item>
              </Card>

              {/* Strategies Section */}
              <Card type="inner" style={{ marginBottom: 24 }}>
                <Title level={4} style={{ color: '#1890ff', marginBottom: 16 }}>
                  <BulbOutlined /> Chi·∫øn L∆∞·ª£c v√† Ph∆∞∆°ng Ph√°p
                </Title>
                
                <Form.Item
                  label="‚ö†Ô∏è Tr√°nh c√°c t√°c nh√¢n k√≠ch th√≠ch"
                  name="smokingTriggersToAvoid"
                >
                  <TextArea
                    rows={3}
                    placeholder="V√≠ d·ª•: Stress c√¥ng vi·ªác, r∆∞·ª£u bia, c√† ph√™ bu·ªïi s√°ng, ho·∫°t ƒë·ªông x√£ h·ªôi, l√°i xe..."
                  />
                </Form.Item>
                
                <Form.Item
                  label="üí™ Chi·∫øn l∆∞·ª£c ƒë·ªëi ph√≥"
                  name="copingStrategies"
                >
                  <TextArea
                    rows={4}
                    placeholder="V√≠ d·ª•: T·∫≠p th·ªÉ d·ª•c 30 ph√∫t/ng√†y, thi·ªÅn ch√°nh ni·ªám, th·ªü s√¢u, nhai k·∫πo cao su, u·ªëng n∆∞·ªõc..."
                  />
                </Form.Item>
                
                <Form.Item
                  label="üõ°Ô∏è Chi·∫øn l∆∞·ª£c ph√≤ng ng·ª´a t√°i nghi·ªán"
                  name="relapsePreventionStrategies"
                >
                  <TextArea
                    rows={4}
                    placeholder="K·∫ø ho·∫°ch x·ª≠ l√Ω khi c√≥ nguy c∆° t√°i nghi·ªán: nh·∫≠n bi·∫øt d·∫•u hi·ªáu s·ªõm, li√™n h·ªá coach, s·ª≠ d·ª•ng k·ªπ thu·∫≠t kh·∫©n c·∫•p..."
                  />
                </Form.Item>
              </Card>

              {/* Support and Motivation */}
              <Card type="inner" style={{ marginBottom: 24 }}>
                <Title level={4} style={{ color: '#1890ff', marginBottom: 16 }}>
                  <HeartOutlined /> H·ªó Tr·ª£ v√† ƒê·ªông L·ª±c
                </Title>
                
                <Form.Item
                  label="üìû Ngu·ªìn h·ªó tr·ª£"
                  name="supportResources"
                >
                  <TextArea
                    rows={3}
                    placeholder="Gia ƒë√¨nh, b·∫°n b√®, nh√≥m h·ªó tr·ª£ cai thu·ªëc, hotline t∆∞ v·∫•n, c·ªông ƒë·ªìng online..."
                  />
                </Form.Item>
                
                <Form.Item
                  label="üî• ƒê·ªông l·ª±c cai thu·ªëc"
                  name="motivation"
                >
                  <TextArea
                    rows={3}
                    placeholder="L√Ω do cai thu·ªëc: s·ª©c kh·ªèe gia ƒë√¨nh, ti·∫øt ki·ªám ti·ªÅn, c·∫£i thi·ªán s·ª©c kh·ªèe, l√†m g∆∞∆°ng cho con..."
                  />
                </Form.Item>
                
                <Form.Item
                  label="üéÅ K·∫ø ho·∫°ch th∆∞·ªüng"
                  name="rewardPlan"
                >
                  <TextArea
                    rows={3}
                    placeholder="Ph·∫ßn th∆∞·ªüng: 1 tu·∫ßn - xem phim, 1 th√°ng - ƒÉn nh√† h√†ng, 3 th√°ng - du l·ªãch..."
                  />
                </Form.Item>
              </Card>

              {/* Additional Notes */}
              <Card type="inner" style={{ marginBottom: 24 }}>
                <Title level={4} style={{ color: '#1890ff', marginBottom: 16 }}>
                  <FileTextOutlined /> Ghi Ch√∫ B·ªï Sung
                </Title>
                
                <Form.Item
                  label="üí≠ Ghi ch√∫"
                  name="additionalNotes"
                >
                  <TextArea
                    rows={4}
                    placeholder="Ghi ch√∫ th√™m v·ªÅ t√¨nh tr·∫°ng s·ª©c kh·ªèe, ti·ªÅn s·ª≠ b·ªánh, m·ªëi quan t√¢m ƒë·∫∑c bi·ªát c·ªßa th√†nh vi√™n..."
                  />
                </Form.Item>
              </Card>

              {/* Submit Actions */}
              <Divider />
              <div style={{ textAlign: 'center' }}>
                <Space size="large">
                  <Button 
                    type="default" 
                    size="large"
                    onClick={goBack}
                  >
                    H·ªßy b·ªè
                  </Button>
                  <Button 
                    type="primary" 
                    htmlType="submit" 
                    loading={loading}
                    size="large"
                    icon={<SaveOutlined />}
                  >
                    {loading ? 'ƒêang t·∫°o...' : 'üöÄ T·∫°o K·∫ø Ho·∫°ch'}
                  </Button>
                </Space>
              </div>
            </Form>
          </Card>
        </div>
      </Content>
    </Layout>
  );
};

export default QuitPlanCreation;
